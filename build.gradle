/**************************************************************************************************
 * IMPORTS, PLUGIN, REPOSITORIES AND DEPENDENCIES
 *************************************************************************************************/

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.github.psxpaul.task.*
import org.gradle.internal.os.OperatingSystem
import java.util.concurrent.atomic.AtomicInteger

/** specify used plugins */
plugins {
    id "com.bmuschko.docker-remote-api" version "6.7.0"     // docker plugin
    id "com.github.psxpaul.execfork" version "0.1.13"       // plugin for background executions
    id "de.undercouch.download" version "1.2"               // downloads plugin
    id "org.jetbrains.kotlin.jvm" version "1.4.10"          // provides kotlin language support
    id "java"                                               // provides java language support
}

/** set repositories used */
repositories {
    mavenCentral()
    maven {
        url "http://jacamo.sourceforge.net/maven2/"         // jacamo repository
    }
}

/** define tasks dependencies */
dependencies {
    implementation "org.jason-lang:jason:2.4"               // jason lang dependency
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"// stdlib for kotlin

    testImplementation "junit:junit:4.12"                   // testing use junit framework
}

/**************************************************************************************************
 * PROJECT SETTINGS, CONSTANTS AND GLOBAL VARIABLES
 *************************************************************************************************/

// define project information
group = "dev.mandrab.university.master.distributedsystems.amw"
version = "1.0"

// constants variables
def FOLDER = [
        DOCKER: [
                CONTEXT: "build/docker",                    // docker context folder
                HOME: "/home/agent",                        // `user' HOME in image
                RESOURCES: "res/docker"                     // folder where to put docker needed files during build
        ],
        JASON: "jason-2.4",                                 // jason folder name
        ASL: [
                SOURCES: "src/main/asl",                    // asl agent folder files
                COMMONS: "src/main/asl/utility"             // common asl agents folder files
        ]
]
def MAIN_CONTAINER = new TaskTarget("main")
def AGENTS = [                                              // system agents
        1: "collection_point_manager",
        2: "command_manager",
        3: "order_manager",
        4: "robot_picker",
        5: "warehouse_mapper"
].collect { new TaskTarget(it.value, it.key) }

/**************************************************************************************************
 * DOCKER CONFIGURATION
 *************************************************************************************************/

AGENTS.collect { TaskTarget target ->                       // create tasks for each agent
    /** Create the Dockerfile to build the agent image */
    define Dockerfile, target.create.dockerfile, {
        from "openjdk:11-jre-slim"                          // base image
        label(["maintainer": 'Paolo Baldini "paolobaldini01@gmail.com"'])   // set image maintainer

        environmentVariable "HOME", FOLDER.DOCKER.HOME      // set HOME environmental variable
        runCommand "mkdir -p $FOLDER.DOCKER.HOME"           // create user (i.e., agent) home folder

        doFirst {
            delete FOLDER.DOCKER.CONTEXT                    // delete files from previous builds
            copy {
                from target.mainFile                        // copy of agent main source file
                into FOLDER.DOCKER.CONTEXT                  // docker build context directory
            }
            copy {
                from target.sourceFiles                     // copy of agent source files
                into "$FOLDER.DOCKER.CONTEXT/${target.name}"// docker build context directory
            }
            copy {
                from FOLDER.ASL.COMMONS                     // copy of agent common source files
                into "$FOLDER.DOCKER.CONTEXT/utility"       // docker build context directory
            }
            copy {
                from "$FOLDER.DOCKER.RESOURCES/$FOLDER.JASON/libs"  // copy of jason files (from download task)
                into "$FOLDER.DOCKER.CONTEXT/libs"          // docker build context directory
            }
        }

        copyFile ".", "$FOLDER.DOCKER.HOME/"                // copy files needed by the agent to work

        entryPoint "java"                                   // system engine
        defaultCommand "-cp", "$FOLDER.DOCKER.HOME/libs/*", // set java classpath
                "jade.Boot",                                // run the agents in jade platform
                "-container",                               // start peripheral container instead of a Main Container
                "-host",                                    // connect to specific host (defined as next parameter)
                "172.17.0.1",                               // address of gateway from bridge network to host machine
                target.unique +                             // define random agent name in the system
                    ":jason.infra.jade.JadeAgArch(" +       // implementation of Jade Architecture to run Jason agents
                    "$FOLDER.DOCKER.HOME/${target.name}.asl)"   // run agent from its .asl main file
    }

    /** Build the agent image through the previously created Dockerfile */
    define DockerBuildImage, target.build.image, {
        dependsOn target.create.dockerfile                  // depends on dockerfile task

        images.add target.containerId                       // create image of agent
    }

    /** Create the agent container from the image */
    define DockerCreateContainer, target.create.container, {
        dependsOn target.build.image                        // depends on image creation task

        targetImageId target.containerId                    // id of image to start
        containerName = target.unique                       // set container name
        hostConfig.autoRemove = true                        // remove the container when the container's process exits
    }

    /** Start agents containers */
    define DockerStartContainer, target.start.agent, {
        dependsOn target.create.container                   // depends on container creation

        targetContainerId find(target.create.container).containerId   // specify id of container to start
    }

    /** Shows logs from the agent container */
    define DockerLogsContainer, target.foreground.log.agent, {
        dependsOn target.start.agent                        // depends on container creation

        targetContainerId find(target.create.container).containerId   // specify id of container to log
        follow = true                                       // task to block until the container exists
        tailAll = true                                      // copy all output since the container has started
        onNext { logger.quiet it.toString() }               // messages from the container will be passed when available
    }

    /** Shows logs from the agent container in background */
    define ExecFork, target.background.log.agent, {
        executable = os "./gradlew"
        args = [ target.foreground.log.agent ]
        stopAfter = test
        waitForOutput = "is ready"
    }

    /** Remove the container of the agent */
    define DockerRemoveContainer, target.remove.container, {
        targetContainerId target.containerId                // specify the target container id
        onError { if (!"404" in it.message) { throw it } }  // ignore error if is of type 'container not found'
    }
}

/**************************************************************************************************
 * OTHER TASKS
 *************************************************************************************************/

/** Download jason zip data */
task download_file(type: Download) {
    src "https://deac-riga.dl.sourceforge.net/project/jason/jason/version%202.4/jason-2.4.zip"
    dest FOLDER.DOCKER.RESOURCES
}

/** Unzip jason zip data */
task unzip(type: Copy) {
    def zipFile = file "$FOLDER.DOCKER.RESOURCES/jason-2.4.zip" // zip file name
    def outputDir = "$FOLDER.DOCKER.RESOURCES/$FOLDER.JASON"// define output directory

    file outputDir mkdirs()                                 // create output process directory

    from zipTree(zipFile)
    into file(outputDir)
}

/** Start jade main container in background */
define JavaExecFork, MAIN_CONTAINER.start.container, {
    classpath = sourceSets.main.runtimeClasspath
    main = "jade.Boot"
    args = [ "-gui" ]
    stopAfter = test
    waitForOutput = "is ready"
}

/** Start admin client */
task start_client(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "MainKt"
    if (project.hasProperty("admin"))
        args = [ "admin" ]
}

/** Start main container and agents of the system */
task start_system(type: DefaultTask) {
    dependsOn MAIN_CONTAINER.start.container

    AGENTS.forEach { dependsOn it.background.log.agent }

    dependsOn start_client
}

/** Tests run depends on start of the main container */
test.dependsOn MAIN_CONTAINER.start.container

/**************************************************************************************************
 * UTILITY FUNCTIONS & CLASSES
 *************************************************************************************************/

/** Only used as syntactic sugar for task definition */
private <T extends Task> T define(Class<T> type, String name, Closure action) {
    return tasks.register(name, type) { it.with action }.get()
}

/** Only used as syntactic sugar for task search */
private Task find(Object seed) { return tasks.getByName(seed.toString()) }

private static String os(Object seed) { return OperatingSystem.current().isWindows() ? seed + ".bat" : seed }

class TaskTarget {
    private static final entitiesCounter = new AtomicInteger()
    private Integer level
    private String seed
    public String name

    TaskTarget(String name, Integer level = 0, String seed = "") {
        this.name = name
        this.level = level
        this.seed = seed
    }

    @Lazy def background = new TaskTarget(name, level, "_background$seed")
    @Lazy def foreground = new TaskTarget(name, level, "_foreground$seed")
    @Lazy def start = new TaskTarget(name, level, "_start$seed")
    @Lazy def create = new TaskTarget(name, level, "_create$seed")
    @Lazy def log = new TaskTarget(name, level, "_log$seed")
    @Lazy def remove = new TaskTarget(name, level, "_remove$seed")
    @Lazy def build = new TaskTarget(name, level, "_build$seed")

    @Lazy def agent = "$level-$name${seed}_agent"
    @Lazy def container = "$level-$name${seed}_container"
    @Lazy def image = "$level-$name${seed}_image"
    @Lazy def dockerfile = "$level-$name${seed}_dockerfile"

    @Lazy def containerId = "amw:$name"
    @Lazy def mainFile = "src/main/asl/${name}.asl"
    @Lazy def sourceFiles = "src/main/asl/$name"
    @Lazy def unique = name + entitiesCounter.getAndIncrement()
}
