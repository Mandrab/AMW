/**************************************************************************************************
 * IMPORTS, PLUGIN, REPOSITORIES AND DEPENDENCIES
 *************************************************************************************************/

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.github.psxpaul.task.*
import org.gradle.internal.os.OperatingSystem

import java.util.concurrent.atomic.AtomicInteger

/** specify used plugins */
plugins {
    id "com.bmuschko.docker-remote-api" version "6.7.0"     // docker plugin
    id "com.github.psxpaul.execfork" version "0.1.13"       // plugin for background executions
    id "de.undercouch.download" version "1.2"               // downloads plugin
    id "org.jetbrains.kotlin.jvm" version "1.4.10"          // provides language support
    id "java"
}

/** set repositories used */
repositories {
    mavenCentral()
    maven {
        url "http://jacamo.sourceforge.net/maven2/"         // jacamo repository
    }
}

/** define tasks dependencies */
dependencies {
    implementation "org.jason-lang:jason:2.4"               // jason lang dependency
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"// stdlib for kotlin

    testImplementation "junit:junit:4.12"                   // testing use junit framework
}

/**************************************************************************************************
 * PROJECT SETTINGS, CONSTANTS AND GLOBAL VARIABLES
 *************************************************************************************************/

// define project information
group = "dev.mandrab.university.master.distributedsystems.amw"
version = "1.0"

// constants
def DOCKER = [
        CONTEXT: "build/docker",                            // docker context folder
        HOME: "/home/agent",                                // set HOME environmental variable
        RESOURCES: "res/docker"                             // folder where to put docker needed files
]
def JASON_FOLDER = "jason-2.4"                              // jason folder name
def LOG_DIR = "logs"                                        // agent log files output folder
def AGENTS = ["collection_point_manager", "command_manager", "order_manager", "robot_picker", "warehouse_mapper"]
        .collect { new Agent(it) }

/**************************************************************************************************
 * DOCKER CONFIGURATION
 *************************************************************************************************/

AGENTS.collect { agentName ->                               // create tasks for each agent

    /** Create the Dockerfile to build the agent image */
    define Dockerfile, agentName.create.dockerfile, {
        logger.quiet title("Creating dockerfile for $agentName agent")  // logging info on creation

        from "openjdk:11-jre-slim"                          // base image
        label(["maintainer": 'Paolo Baldini "paolobaldini01@gmail.com"'])   // set image maintainer

        environmentVariable "HOME", DOCKER.HOME             // set HOME environmental variable
        runCommand "mkdir -p $DOCKER.HOME"                  // create user (i.e., agent) home folder

        doFirst {
            delete DOCKER.CONTEXT                           // delete files from previous builds
            copy {
                from "src/main/asl/$agentName"              // copy of agent specific files
                from "src/main/asl/common"                  // copy of commons agent files
                into DOCKER.CONTEXT                         // docker build context directory
            }
            copy {
                from "$DOCKER.RESOURCES/$JASON_FOLDER/libs" // copy of jason files (from download task)
                into "$DOCKER.CONTEXT/libs"                 // docker build context directory
            }
        }

        copyFile ".", "$DOCKER.HOME/"                       // copy files needed by the agent to work

        entryPoint "java"                                   // system engine
        defaultCommand "-cp", "$DOCKER.HOME/libs/*",        // set java classpath
                "jade.Boot",                                // run the agents in jade platform
                "-container",                               // start peripheral container instead of a Main Container
                "-host",                                    // connect to specific host (defined as next parameter)
                "172.17.0.1",                               // address of gateway from bridge network to host machine
                agentName.unique +                          // define random agent name in the system
                    ":jason.infra.jade.JadeAgArch(" +       // implementation of Jade Architecture to run Jason agents
                    "$DOCKER.HOME/agent.asl)"               // run agent from its .asl main file
    }

    /** Build the agent image through the previously created Dockerfile */
    define DockerBuildImage, agentName.build.image, {
        dependsOn agentName.create.dockerfile               // depends on dockerfile task

        logger.quiet title("Creating image of $agentName agent")// logging info on creation

        images.add "amw:$agentName-$version"                // create image of agent
    }

    /** Create the agent container from the image */
    define DockerCreateContainer, agentName.create.container, {
        dependsOn agentName.build.image                     // depends on image creation task

        logger.info "Creating container of $agentName agent"// logging info on creation

        targetImageId "amw:$agentName-$version"             // id of image to start
        containerName = agentName.unique                    // set container name
        hostConfig.autoRemove = true                        // remove the container when the container's process exits
    }

    /** Start agents containers */
    define DockerStartContainer, agentName.start.agent, {
        dependsOn agentName.create.container                // depends on container creation

        logger.quiet title("Starting $agentName agent")     // logging info on creation

        targetContainerId find(agentName.create.container).containerId   // specify id of container to start
    }

    /** Shows logs from the agent container */
    define DockerLogsContainer, 'todo' + agentName.log.agent, {
        dependsOn agentName.start.agent                     // depends on container creation

        logger.quiet title("Logging $agentName agent")      // logging info on creation

        targetContainerId find(agentName.create.container).containerId   // specify id of container to log
        follow = true                                       // task to block until the container exists
        tailAll = true                                      // copy all output since the container has started
        onNext { logger.quiet it.toString() }               // messages from the container will be passed when available
    }

    /** Shows logs from the agent container in background */
    define DefaultTask, agentName.stop.background.log.agent, {}

    /** Shows logs from the agent container in background TODO check and clean */
    define ExecFork, agentName.start.background.log.agent, {
        executable = os "./gradlew"
        args = [ agentName.log.agent ]
        standardOutput = "$LOG_DIR/${agentName.agent}-daemon.log"
        errorOutput = "$LOG_DIR/${agentName.agent}-daemon-error.log"
        stopAfter = find agentName.stop.background.log.agent
        waitForOutput = 'is ready'
    }

    /** Remove the container of the agent */
    define DockerRemoveContainer, agentName.remove.container, {
        logger.quiet title("Removing container of $agentName agent")// logging info on creation

        targetContainerId "amw:$agentName-$version"         // specify the target container id
        onError { if (!"404" in it.message) { throw it } }  // ignore error if is of type 'container not found'
    }
}

/** Build images of all the agents */
task build_images(type: DefaultTask) {
    AGENTS.forEach({ dependsOn it.build.image })            // depends on the build of each agent
}

/** Create a container for each agent */
task create_containers(type: DefaultTask) {
    AGENTS.forEach({ dependsOn it.create.container })       // depends on the start of each agent
}

/** Start all agents containers */
task start_agents(type: DefaultTask) {
    AGENTS.forEach({ dependsOn it.start.agent })            // depends on the start of each agent
}

/** Display logs of all the agents in background */
task show_logs(type: DefaultTask) { // TODO test
    AGENTS.forEach({ dependsOn it.background.log.agent })   // depends on the start of each agent
}

/** Remove all the agents containers */
task remove_containers(type: DefaultTask) { // TODO test
    AGENTS.forEach({ dependsOn it.remove.container })       // depends on the removal of each container
}

/**************************************************************************************************
 * OTHER TASKS
 *************************************************************************************************/

/** Download jason zip data */
task download_file(type: Download) {
    src "https://deac-riga.dl.sourceforge.net/project/jason/jason/version%202.4/jason-2.4.zip"
    dest DOCKER.RESOURCES
}

/** Unzip jason zip data */
task unzip(type: Copy) {
    def zipFile = file "$DOCKER.RESOURCES/jason-2.4.zip"    // zip file name
    def outputDir = "$DOCKER.RESOURCES/$JASON_FOLDER"       // define output directory

    file outputDir mkdirs()                                 // create output process directory

    from zipTree(zipFile)
    into file(outputDir)
}

/** Stop background jade main container */
define DefaultTask, new Agent("main").stop.background.container, { }

/** Start background jade main container */
define JavaExecFork, new Agent("main").start.background.container, {
    classpath = sourceSets.main.runtimeClasspath
    main = "jade.Boot"
    args [ "-gui" ]
    stopAfter = find(new Agent("main").stop.background.container)
}

/** Start agent specifying path, file and name */
task start_agent(type: JavaExec) {
    if (!project.hasProperty("f")) {
        return logger.error("The agent name must be passed!")
    }

    String path = project.properties.getOrDefault("p", ".")
    String file = project.properties["f"]
    String name = project.properties.getOrDefault("n", file.substring(0, file.lastIndexOf('.')))

    group = "jason"

    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    main "jade.Boot"
    args "-container"
    args "${randomName(name)}:jason.infra.jade.JadeAgArch($path/$file)"
}

/**
 * Start main container and agents of the system.
 * Require the initialization/setup tasks to be already completed
 */
task start_system(type: DefaultTask) {
    dependsOn new Agent("main").start.background.container
    finalizedBy show_logs
}

/** Tests generally needs system to be running TODO */
test.dependsOn start_system finalizedBy find(new Agent("main").stop.background.container)

/**************************************************************************************************
 * UTILITY FUNCTIONS & CLASSES
 *************************************************************************************************/

/** Only used as syntactic sugar for task definition */
private <T extends Task> void define(Class<T> type, String name, Closure action) {
    tasks.register(name, type) { it.with action }
}

/** Only used as syntactic sugar for task search */
private Task find(Object seed) { return tasks.getByName(seed.toString()) }

private static String bf(String seed) { return "\033[1m$seed\033[0m" }
private static String title(String seed) { return bf("### $seed") }

private static String os(Object seed) { return OperatingSystem.current().isWindows() ? seed + ".bat" : seed }

class Agent {
    private static final entitiesCounter = new AtomicInteger()
    private String seed

    Agent(String seed) { this.seed = seed }

    @Lazy def background = new Agent("background_$seed")
    @Lazy def start = new Agent("start_$seed")
    @Lazy def stop = new Agent("stop_$seed")
    @Lazy def create = new Agent("create_$seed")
    @Lazy def log = new Agent("log_$seed")
    @Lazy def remove = new Agent("remove_$seed")
    @Lazy def build = new Agent("build_$seed")

    @Lazy def agent = seed + "_agent"
    @Lazy def container = seed + "_container"
    @Lazy def image = seed + "_image"
    @Lazy def dockerfile = seed + "_dockerfile"

    @Lazy def unique = "$seed-${entitiesCounter.getAndIncrement()}"
}
